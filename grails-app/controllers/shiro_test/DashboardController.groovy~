package shiro_test

import org.apache.shiro.SecurityUtils
import org.apache.shiro.subject.Subject
import resource.DataCenter
import resource.Floor
import resource.Rack
import resource.Host
import resource.PowerStamp
import resource.DataCenters
import java.text.SimpleDateFormat
import java.util.*
import groovy.time.*
import static java.util.Calendar.*
import shiro_test.User
import shiro_test.Cost_Center
import java.lang.Math;
import java.util.Collections.*;
import resource.Scheduler
import shiro_test.Result
import org.codehaus.groovy.grails.web.context.ServletContextHolder as SCH
import org.codehaus.groovy.grails.web.servlet.GrailsApplicationAttributes as GA


/*
* This controller class performs all the functions necessary to take in the data
* returned from the Papillon API and manipulate it to populate the graphs i.e. to create the dashboard
*/
class DashboardController { 

    /*
    * Method that is called by default for Dashboard Controller. 
    * All data-manipulation methods are contained in here
    */
    def index() { 
		
		// Get the current user logged into website
		def currentUser = SecurityUtils.getSubject()
		currentUser = currentUser.getPrincipal()

		// Testing - list all created cost centers
		def centerInstance = Cost_Center.list()

		// Retrieve the cost center that the user would like to view
		def cost_center_chosen = Cost_Center.get(params.id)

		// Return a list of cost centers that the logged in user has created
		def costcenterstuff2 = Cost_Center.withCriteria{
			users {
				eq('username', currentUser)
			}
		}

		// If the user has not created any cost centers, redirect them to the 'Create Cost Center' page
		if(costcenterstuff2.size() == 0){
			redirect(controller: "cost_Center", action: "create")
		} 
		
		// If the user has created cost centers previously, redirect them to the first
		// cost center in their list of cost centers
		else{

			// Declare variable to store cost center
			Cost_Center first_cc;

			// Retrieve user's first created cost center
			if ((cost_center_chosen == null) && (costcenterstuff2.size() > 0)){
				first_cc = costcenterstuff2.get(0)
			}

	
			// If cost center not defined in params (URL), redirect to first cost center
			if (cost_center_chosen == null){
				redirect(action: "index", params: [id: first_cc.id])
			} else{

				// Retrieve list of servers associated with specified cost center
				def servers_included = Server.withCriteria{
				costcenters {
					eq('costCenterName', cost_center_chosen.costCenterName)
				}

			}


			def user_results = User.withCriteria{
				eq('username', currentUser)

			}


			// Get cents per kilowatt cost that was defined by user for cost center
			def costCenterCentsPerKw = cost_center_chosen.centsPerKiloWatt
			
			// Initialize array containing budget amount per month
			ArrayList<Double> monthBudgetsArray = new ArrayList<Double>();

			// Add monthly budget allowances to array when converted to cents
			monthBudgetsArray.add(cost_center_chosen.janBudget * 100)
			monthBudgetsArray.add(cost_center_chosen.febBudget * 100)
			monthBudgetsArray.add(cost_center_chosen.marBudget * 100)
			monthBudgetsArray.add(cost_center_chosen.aprBudget * 100)
			monthBudgetsArray.add(cost_center_chosen.mayBudget * 100)
			monthBudgetsArray.add(cost_center_chosen.junBudget * 100)
			monthBudgetsArray.add(cost_center_chosen.julBudget * 100)
			monthBudgetsArray.add(cost_center_chosen.augBudget * 100)
			monthBudgetsArray.add(cost_center_chosen.septBudget * 100)
			monthBudgetsArray.add(cost_center_chosen.octBudget * 100)			
			monthBudgetsArray.add(cost_center_chosen.novBudget * 100)
			monthBudgetsArray.add(cost_center_chosen.decBudget * 100)

			String[] servers_needed = new String[servers_included.size()];

			for(int x= 0; x < servers_included.size(); x++){
				System.out.println("this server " + servers_included.get(x))
				servers_needed[x] = servers_included.get(x).serverName
			}
			

			String[] servers_needed_ids = new String[servers_included.size()];
			for(int x= 0; x < servers_included.size(); x++){
				def s = servers_included.get(x)
				servers_needed_ids[x] = s.id
			}


			List<String> servers_in_cc = new ArrayList<String>(Arrays.asList(servers_needed_ids))

			String [] arr = new String[1]

			// Hardcoded value for local server
			arr[0] = "dc1fl1rk1ht1"

		
			// Instantiate DataCenters object
			DataCenters dcs = new DataCenters();


			// Use for-enhanced loops to get all data points associated with server
			String results = "";
			ArrayList<Double> allPowerConsumptionEntries = new ArrayList<Double>();
			ArrayList<String> servers = new ArrayList<String>();
			ArrayList<Long> timestamps = new ArrayList<Long>();
			ArrayList<Double> powerratings = new ArrayList<Double>();
			for(DataCenter d: dcs.getDatacenters()){
				for(Floor f: d.getFloors()){
					for(Rack rk: f.getRacks()){
						for(Host h: rk.getHosts()){
							for(Iterator<HashMap<String, HashMap<Long, Double>>> hs = h.getPower(h.getTrackerId()).keySet().iterator(); hs.hasNext() && servers_needed.contains(h.getTrackerId());){
								String key = hs.next();
								HashMap<Long, Double> value = h.getPower(h.getTrackerId()).get(key);
								Map<Long, Double> values = new TreeMap<Long, Double>(value);

								for(Iterator<Long> it = values.keySet().iterator(); it.hasNext();){
									Long innerkey = it.next();
									Double powervalue = values.get(innerkey);
									allPowerConsumptionEntries.add(powervalue/1000)
									//converting watts/min to cents/kilowatts/hour
									powervalue = (powervalue * 60)/1000  * costCenterCentsPerKw
									servers.add(key)
									timestamps.add(innerkey)
									powerratings.add(powervalue)
									results += "key is " + key + " and innerkey is " + innerkey + " and power value is " + powervalue + " "			
								}
							}
						}
					}
				}
			}



			/*
			* Block of code that uses loop performed above
			* to populate the daily graph and table
			*/
			def dailyGraphData = []
			def dailyAlertsData = []
			Double totalDailyPower = 0;
			Double totalDailyCarbon = 0;
			Double totalDailyPowerCost = 0;
			Calendar calDateForDailyGraph;
			int daysInMonthForDailyGraph = 0;
			int monthForDailyGraph = 0;
			double monthBudgetForDailyGraph = 0;
			double dailyTotalBudgetEvaluation = 0;
			
			Date yesterday = new Date(System.currentTimeMillis() - 1000L * 60L * 60L * 24L);
			
			def alertCounter = 0
			for(def i=timestamps.size() - 1; i > 0; i--){
				Date newDate = new Date((long)timestamps[i]*1000);
				calDateForDailyGraph = dateToCalendar(newDate)
				daysInMonthForDailyGraph = calDateForDailyGraph.getActualMaximum(Calendar.DAY_OF_MONTH)
				monthForDailyGraph = calDateForDailyGraph.get(Calendar.MONTH)
				monthBudgetForDailyGraph = monthBudgetsArray[monthForDailyGraph]
			
				if(newDate > yesterday){
					dailyGraphData.add([newDate, powerratings[i], (monthBudgetForDailyGraph/(daysInMonthForDailyGraph *24))])
					totalDailyPowerCost += powerratings[i];
					totalDailyPower += allPowerConsumptionEntries[i]
					if (alertCounter < 10 && powerratings[i] > (monthBudgetForDailyGraph/(daysInMonthForDailyGraph * 24))){
						if (powerratings[i] == null){
							powerratings[i] = 0.0
						}
						dailyAlertsData.add([newDate, (double)Math.round((powerratings[i] - (monthBudgetForDailyGraph/(daysInMonthForDailyGraph * 24))) * 10000000)/10000000])
					}
					
				}

				alertCounter++
			}
			
			//metric taken from www.carbonindependent.org
			totalDailyCarbon = 0.527 * totalDailyPower;

		
			// Resolve whether daily budget deficit/surplus eventuated
			if((monthBudgetForDailyGraph/(daysInMonthForDailyGraph)) > totalDailyPowerCost){
				dailyTotalBudgetEvaluation = ((monthBudgetForDailyGraph/(daysInMonthForDailyGraph)) - totalDailyPowerCost)
			} else {
				dailyTotalBudgetEvaluation = (monthBudgetForDailyGraph/(daysInMonthForDailyGraph)) - totalDailyPowerCost
			}


			/*
			* Block of code that retrieves daily totals within the past week
			* from the database, and performs calculations for graphs/tables
			*/
			def weeklyGraphData = []
			def totalWeeklyPowerCost = 0
			def totalWeeklyPower = 0
			def totalWeeklyCarbon = 0
			Calendar calDateForWeekGraph;
			int daysInMonthForWeekGraph = 0;
			int monthForWeekGraph = 0;
			double monthBudgetForWeekGraph = 0;

			ArrayList<Result> weekArray = new ArrayList<Result>();
			ArrayList<Result> cumulativeWeekArray = new ArrayList<Result>();
			def weeklyPowerCostCounter = 0
			def weeklyBudgetCounter = 0
			def now = new Date()
			for(def k=7; k >= 0; k--){
				
				def weekresults = Result.withCriteria{
			
					calDateForWeekGraph = dateToCalendar(now-k)
					daysInMonthForWeekGraph = calDateForWeekGraph.getActualMaximum(Calendar.DAY_OF_MONTH)
					monthForWeekGraph = calDateForWeekGraph.get(Calendar.MONTH)
					monthBudgetForWeekGraph = monthBudgetsArray[monthForWeekGraph]
					between('dateOfQuery', now-k, (now - k) + 1)
					inList('servers', servers_included)
				}

				if (weekresults.dailyTotalPower[0] != null) {
					totalWeeklyPower += weekresults.dailyTotalPower[0]
					weeklyPowerCostCounter += weekresults.dailyTotalPower[0] * costCenterCentsPerKw
				}
				weeklyBudgetCounter += (monthBudgetForWeekGraph/(daysInMonthForWeekGraph/7.0)) /7.0

				double tempDailyPowerCost = 0
				if (weekresults.dailyTotalPower[0] != null){
					tempDailyPowerCost = weekresults.dailyTotalPower[0] * costCenterCentsPerKw
				}
				weekArray.add([now - k, tempDailyPowerCost, (monthBudgetForWeekGraph/(daysInMonthForWeekGraph/7.0)) /7.0])
				cumulativeWeekArray.add([now-k, weeklyPowerCostCounter, weeklyBudgetCounter])

			}

	
			totalWeeklyCarbon = 0.527 * totalWeeklyPower

			double totalWeeklyBudgetDifference
			if (weeklyBudgetCounter > weeklyPowerCostCounter){
			 	totalWeeklyBudgetDifference = weeklyBudgetCounter - weeklyPowerCostCounter
			} else{
				totalWeeklyBudgetDifference = weeklyPowerCostCounter - weeklyBudgetCounter
			}


			/*
			* Block of code to retrieve daily totals from database
			* within the last month and perform calculations for graphs/tables
			*/
			def monthlyGraphData = []
			def totalMonthlyPowerCost = 0
			def totalMonthlyPower = 0
			def totalMonthlyCarbon = 0
			Calendar calDate;
			int daysInMonth = 0;
			int month = 0;
			double monthBudget = 0;
			double monthlyPowerCounter = 0;
			double monthlyBudgetCounter = 0

			//new graph for month - fetching from database
			ArrayList<Result> monthArray = new ArrayList<Result>();
			ArrayList<Result> cumulativeMonthArray = new ArrayList<Result>();
			for(def k=31; k >= 0; k--){
				
				def monthresults = Result.withCriteria{
			
					calDate = dateToCalendar(now-k)
					daysInMonth = calDate.getActualMaximum(Calendar.DAY_OF_MONTH)
					month = calDate.get(Calendar.MONTH)
					monthBudget = monthBudgetsArray[month]
					between('dateOfQuery', now-k, (now - k) + 1)
					inList('servers', servers_included)
				}
				
				if (monthresults.dailyTotalPower[0] != null) {
					totalMonthlyPower += monthresults.dailyTotalPower[0]
					monthlyPowerCounter += monthresults.dailyTotalPower[0] * costCenterCentsPerKw
				}
				monthlyBudgetCounter += (monthBudget/daysInMonth)

				double tempMonthlyPowerCost = 0
				if (monthresults.dailyTotalPower[0] != null){
					tempMonthlyPowerCost = monthresults.dailyTotalPower[0] * costCenterCentsPerKw
				}
				cumulativeMonthArray.add([now - k, monthlyPowerCounter, monthlyBudgetCounter])

				monthArray.add([now - k, tempMonthlyPowerCost, monthBudget/daysInMonth])

			}

			totalMonthlyCarbon = 0.527 * totalMonthlyPower
			double monthlyBudgetDiff = 0
			if(monthlyBudgetCounter > monthlyPowerCounter){
				monthlyBudgetDiff = monthlyBudgetCounter - monthlyPowerCounter
			} else{
				monthlyBudgetDiff = monthlyPowerCounter - monthlyBudgetCounter
			}


			/*
			* Block of code to aggregate and manipulate data for the
			* annual graphs/tables within the last year (from today's date)
			*/
			def annualGraphData = []
			def totalAnnualPowerCost = 0
			def totalAnnualPower = 0
			def totalAnnualCarbon = 0
			Calendar calDateForAnnualGraph;
			int daysInMonthForAnnualGraph = 0;
			int monthForAnnualGraph = 0;
			double monthBudgetForAnnualGraph = 0;
			

			//new graph for year - fetching from database
			ArrayList<Result> yearArray = new ArrayList<Result>();
			ArrayList<Result> cumulativeYearArray = new ArrayList<Result>();
			double yearlyPowerCounter = 0
			double yearlyBudgetCounter = 0
			for(def k=365; k >= 0; k--){
				
				def yearresults = Result.withCriteria{
			
					calDateForAnnualGraph = dateToCalendar(now-k)
					daysInMonthForAnnualGraph = calDateForAnnualGraph.getActualMaximum(Calendar.DAY_OF_MONTH)
					monthForAnnualGraph = calDateForAnnualGraph.get(Calendar.MONTH)
					monthBudgetForAnnualGraph = monthBudgetsArray[monthForAnnualGraph]
					between('dateOfQuery', now-k, (now - k) + 1)
					inList('servers', servers_included)
				}

				if (yearresults.dailyTotalPower[0] != null) {
					totalAnnualPower += yearresults.dailyTotalPower[0]
					yearlyPowerCounter += yearresults.dailyTotalPower[0] * costCenterCentsPerKw
				}
				yearlyBudgetCounter += (monthBudgetForAnnualGraph/daysInMonthForAnnualGraph)

				double tempYearlyPowerCost = 0
				if (yearresults.dailyTotalPower[0] != null){
					tempYearlyPowerCost = yearresults.dailyTotalPower[0] * costCenterCentsPerKw
				}

				cumulativeYearArray.add([now - k, yearlyPowerCounter,yearlyBudgetCounter])
				yearArray.add([now - k,tempYearlyPowerCost, monthBudgetForAnnualGraph/daysInMonthForAnnualGraph])

			}

			totalAnnualCarbon = 0.527 * totalAnnualPower
			double annualBudgetDiff = 0
			if(yearlyBudgetCounter > yearlyPowerCounter){
				annualBudgetDiff = yearlyBudgetCounter - yearlyPowerCounter
			} else{
				annualBudgetDiff = yearlyPowerCounter - yearlyBudgetCounter
			}


			// list of key-value pairs to send to html page for use with grails template language
			[centerInstanceList: centerInstance, User: currentUser, avgpower: 5, totalpower: 6, timestamps: timestamps, powerratings: powerratings, timestamplength: timestamps.size(), dailyGraphData: dailyGraphData, user_results: user_results.id, costc_results: costcenterstuff2, cost_center_chosen: cost_center_chosen, first_cc: first_cc, yesterday: yesterday, weeklyGraphData: weeklyGraphData, monthlyGraphData: monthArray, annualGraphData: yearArray, servers_included: servers_included, servers_needed: Arrays.toString(servers_needed), server_ids: Arrays.toString(servers_needed_ids), costCenterCentsPerKw: costCenterCentsPerKw, totalDailyPowerCost: (double)Math.round(totalDailyPowerCost * 10000000)/10000000, dailyTimestampsLength: dailyGraphData.size(), totalDailyCarbon:  (double)Math.round(totalDailyCarbon * 10000000)/10000000, totalDailyPower: (double)Math.round(totalDailyPower * 10000000)/10000000, totalWeeklyPowerCost: totalWeeklyPowerCost, totalWeeklyPower: totalWeeklyPower, totalWeeklyCarbon:totalWeeklyCarbon, daysInMonth: daysInMonth, month: month, monthBudget: monthBudget, totalMonthlyPowerCost: totalMonthlyPowerCost, totalMonthlyPower: totalMonthlyPower, totalMonthlyCarbon: totalMonthlyCarbon, totalAnnualPowerCost: yearlyPowerCounter,
totalAnnualPower: totalAnnualPower, totalAnnualCarbon: totalAnnualCarbon, weeklyBudgetData: cumulativeWeekArray, monthlyBudgetData: cumulativeMonthArray, annualBudgetData: cumulativeYearArray, weekresults: weekArray, dailyAlertsData: dailyAlertsData, alertslength: dailyAlertsData.size(), dailyTotalBudgetEvaluation: dailyTotalBudgetEvaluation, weeklyPowerCostCounter: weeklyPowerCostCounter, totalWeeklyBudgetDifference: totalWeeklyBudgetDifference, monthlyPowerCounter: monthlyPowerCounter, monthlyBudgetDiff: monthlyBudgetDiff, annualBudgetDiff: annualBudgetDiff, monthBudgetForDailyGraph: monthBudgetForDailyGraph]

		}
		}
	
    }


    /*
    * Method to return date in calendar format necessary for graphs
    */
    def static Calendar dateToCalendar(Date date){
	Calendar cal = Calendar.getInstance()
	cal.setTime(date)
	return cal
	
    }
}
